// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `offline.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const common = require("./common").common;
    const Slice = Ice.Slice;

    let offline = _ModuleRegistry.module("offline");

    const iceC_offline_SystemOfflineTaskResponse_ids = [
        "::Ice::Object",
        "::offline::SystemOfflineTaskResponse"
    ];

    offline.SystemOfflineTaskResponse = class extends Ice.Value
    {
        constructor(taskId = "", type = 0, name = "", status = 0, serverId = "", createTime = new Ice.Long(0, 0), updateTime = new Ice.Long(0, 0), createUser = new Ice.Long(0, 0), createIp = "", detail = "", size = new Ice.Long(0, 0), progress = 0, finishedSize = new Ice.Long(0, 0), errorCode = 0, mime = "")
        {
            super();
            this.taskId = taskId;
            this.type = type;
            this.name = name;
            this.status = status;
            this.serverId = serverId;
            this.createTime = createTime;
            this.updateTime = updateTime;
            this.createUser = createUser;
            this.createIp = createIp;
            this.detail = detail;
            this.size = size;
            this.progress = progress;
            this.finishedSize = finishedSize;
            this.errorCode = errorCode;
            this.mime = mime;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeString(this.taskId);
            ostr.writeInt(this.type);
            ostr.writeString(this.name);
            ostr.writeInt(this.status);
            ostr.writeString(this.serverId);
            ostr.writeLong(this.createTime);
            ostr.writeLong(this.updateTime);
            ostr.writeLong(this.createUser);
            ostr.writeString(this.createIp);
            ostr.writeString(this.detail);
            ostr.writeLong(this.size);
            ostr.writeInt(this.progress);
            ostr.writeLong(this.finishedSize);
            ostr.writeInt(this.errorCode);
            ostr.writeString(this.mime);
        }

        _iceReadMemberImpl(istr)
        {
            this.taskId = istr.readString();
            this.type = istr.readInt();
            this.name = istr.readString();
            this.status = istr.readInt();
            this.serverId = istr.readString();
            this.createTime = istr.readLong();
            this.updateTime = istr.readLong();
            this.createUser = istr.readLong();
            this.createIp = istr.readString();
            this.detail = istr.readString();
            this.size = istr.readLong();
            this.progress = istr.readInt();
            this.finishedSize = istr.readLong();
            this.errorCode = istr.readInt();
            this.mime = istr.readString();
        }
    };

    Slice.defineValue(offline.SystemOfflineTaskResponse, iceC_offline_SystemOfflineTaskResponse_ids[1], false);

    offline.SystemOfflineTaskResponseDisp = class extends Ice.Object
    {
    };

    Slice.defineOperations(offline.SystemOfflineTaskResponseDisp, undefined, iceC_offline_SystemOfflineTaskResponse_ids, 1);

    const iceC_offline_SystemTaskDetailResponse_ids = [
        "::Ice::Object",
        "::offline::SystemTaskDetailResponse"
    ];

    offline.SystemTaskDetailResponse = class extends Ice.Value
    {
        constructor(taskId = "", path = "", size = new Ice.Long(0, 0), completed = new Ice.Long(0, 0), progress = 0, order = 0, storeId = "")
        {
            super();
            this.taskId = taskId;
            this.path = path;
            this.size = size;
            this.completed = completed;
            this.progress = progress;
            this.order = order;
            this.storeId = storeId;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeString(this.taskId);
            ostr.writeString(this.path);
            ostr.writeLong(this.size);
            ostr.writeLong(this.completed);
            ostr.writeInt(this.progress);
            ostr.writeInt(this.order);
            ostr.writeString(this.storeId);
        }

        _iceReadMemberImpl(istr)
        {
            this.taskId = istr.readString();
            this.path = istr.readString();
            this.size = istr.readLong();
            this.completed = istr.readLong();
            this.progress = istr.readInt();
            this.order = istr.readInt();
            this.storeId = istr.readString();
        }
    };

    Slice.defineValue(offline.SystemTaskDetailResponse, iceC_offline_SystemTaskDetailResponse_ids[1], false);

    offline.SystemTaskDetailResponseDisp = class extends Ice.Object
    {
    };

    Slice.defineOperations(offline.SystemTaskDetailResponseDisp, undefined, iceC_offline_SystemTaskDetailResponse_ids, 1);

    Slice.defineSequence(offline, "SystemTaskDetailResponseListHelper", "Ice.ObjectHelper", false, "offline.SystemTaskDetailResponse");

    const iceC_offline_SystemOfflineTaskWithDetailResponse_ids = [
        "::Ice::Object",
        "::offline::SystemOfflineTaskWithDetailResponse"
    ];

    offline.SystemOfflineTaskWithDetailResponse = class extends Ice.Value
    {
        constructor(task = null, detail = null)
        {
            super();
            this.task = task;
            this.detail = detail;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeValue(this.task);
            offline.SystemTaskDetailResponseListHelper.write(ostr, this.detail);
        }

        _iceReadMemberImpl(istr)
        {
            istr.readValue(obj => this.task = obj, offline.SystemOfflineTaskResponse);
            this.detail = offline.SystemTaskDetailResponseListHelper.read(istr);
        }
    };

    Slice.defineValue(offline.SystemOfflineTaskWithDetailResponse, iceC_offline_SystemOfflineTaskWithDetailResponse_ids[1], false);

    offline.SystemOfflineTaskWithDetailResponseDisp = class extends Ice.Object
    {
    };

    Slice.defineOperations(offline.SystemOfflineTaskWithDetailResponseDisp, undefined, iceC_offline_SystemOfflineTaskWithDetailResponse_ids, 1);

    Slice.defineSequence(offline, "SystemOfflineTaskResponseListHelper", "Ice.ObjectHelper", false, "offline.SystemOfflineTaskResponse");

    Slice.defineSequence(offline, "IntListHelper", "Ice.IntHelper", true);

    const iceC_offline_UserOfflineTaskResponse_ids = [
        "::Ice::Object",
        "::offline::UserOfflineTaskResponse"
    ];

    offline.UserOfflineTaskResponse = class extends Ice.Value
    {
        constructor(userId = new Ice.Long(0, 0), taskId = "", copyFile = "", copiedFile = "", createTime = new Ice.Long(0, 0), savePath = "", filePath = "", copied = new Ice.Long(0, 0), status = 0)
        {
            super();
            this.userId = userId;
            this.taskId = taskId;
            this.copyFile = copyFile;
            this.copiedFile = copiedFile;
            this.createTime = createTime;
            this.savePath = savePath;
            this.filePath = filePath;
            this.copied = copied;
            this.status = status;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeLong(this.userId);
            ostr.writeString(this.taskId);
            ostr.writeString(this.copyFile);
            ostr.writeString(this.copiedFile);
            ostr.writeLong(this.createTime);
            ostr.writeString(this.savePath);
            ostr.writeString(this.filePath);
            ostr.writeLong(this.copied);
            ostr.writeInt(this.status);
        }

        _iceReadMemberImpl(istr)
        {
            this.userId = istr.readLong();
            this.taskId = istr.readString();
            this.copyFile = istr.readString();
            this.copiedFile = istr.readString();
            this.createTime = istr.readLong();
            this.savePath = istr.readString();
            this.filePath = istr.readString();
            this.copied = istr.readLong();
            this.status = istr.readInt();
        }
    };

    Slice.defineValue(offline.UserOfflineTaskResponse, iceC_offline_UserOfflineTaskResponse_ids[1], false);

    offline.UserOfflineTaskResponseDisp = class extends Ice.Object
    {
    };

    Slice.defineOperations(offline.UserOfflineTaskResponseDisp, undefined, iceC_offline_UserOfflineTaskResponse_ids, 1);

    const iceC_offline_CopyTaskResponse_ids = [
        "::Ice::Object",
        "::offline::CopyTaskResponse"
    ];

    offline.CopyTaskResponse = class extends Ice.Value
    {
        constructor(taskId = "", userId = new Ice.Long(0, 0), progress = 0, updateTime = new Ice.Long(0, 0), status = 0, copied = new Ice.Long(0, 0), needCopySize = new Ice.Long(0, 0))
        {
            super();
            this.taskId = taskId;
            this.userId = userId;
            this.progress = progress;
            this.updateTime = updateTime;
            this.status = status;
            this.copied = copied;
            this.needCopySize = needCopySize;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeString(this.taskId);
            ostr.writeLong(this.userId);
            ostr.writeInt(this.progress);
            ostr.writeLong(this.updateTime);
            ostr.writeInt(this.status);
            ostr.writeLong(this.copied);
            ostr.writeLong(this.needCopySize);
        }

        _iceReadMemberImpl(istr)
        {
            this.taskId = istr.readString();
            this.userId = istr.readLong();
            this.progress = istr.readInt();
            this.updateTime = istr.readLong();
            this.status = istr.readInt();
            this.copied = istr.readLong();
            this.needCopySize = istr.readLong();
        }
    };

    Slice.defineValue(offline.CopyTaskResponse, iceC_offline_CopyTaskResponse_ids[1], false);

    offline.CopyTaskResponseDisp = class extends Ice.Object
    {
    };

    Slice.defineOperations(offline.CopyTaskResponseDisp, undefined, iceC_offline_CopyTaskResponse_ids, 1);

    Slice.defineSequence(offline, "UserOfflineTaskResponseListHelper", "Ice.ObjectHelper", false, "offline.UserOfflineTaskResponse");

    Slice.defineSequence(offline, "CopyTaskResponseListHelper", "Ice.ObjectHelper", false, "offline.CopyTaskResponse");

    const iceC_offline_UserOfflinePageResponse_ids = [
        "::Ice::Object",
        "::common::CommonPage",
        "::offline::UserOfflinePageResponse"
    ];

    offline.UserOfflinePageResponse = class extends common.CommonPage
    {
        constructor(page, pageSize, totalCount, totalPage, list = null)
        {
            super(page, pageSize, totalCount, totalPage);
            this.list = list;
        }

        _iceWriteMemberImpl(ostr)
        {
            offline.UserOfflineTaskResponseListHelper.write(ostr, this.list);
        }

        _iceReadMemberImpl(istr)
        {
            this.list = offline.UserOfflineTaskResponseListHelper.read(istr);
        }
    };

    Slice.defineValue(offline.UserOfflinePageResponse, iceC_offline_UserOfflinePageResponse_ids[2], false);

    offline.UserOfflinePageResponseDisp = class extends common.CommonPageDisp
    {
    };

    Slice.defineOperations(offline.UserOfflinePageResponseDisp, undefined, iceC_offline_UserOfflinePageResponse_ids, 2);

    Slice.defineSequence(offline, "StringSequenceHelper", "Ice.StringHelper", false);

    const iceC_offline_OfflineTaskServiceHandler_ids = [
        "::Ice::Object",
        "::offline::OfflineTaskServiceHandler"
    ];

    offline.OfflineTaskServiceHandler = class extends Ice.Object
    {
    };

    offline.OfflineTaskServiceHandlerPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(offline.OfflineTaskServiceHandler, offline.OfflineTaskServiceHandlerPrx, iceC_offline_OfflineTaskServiceHandler_ids, 1,
    {
        "addSystemTask": [, , , , ["offline.SystemOfflineTaskResponse", true], [[7], [3], [7], [4], [7], [7]], , , , true],
        "getSystemOfflineTaskList": [, , , , ["offline.SystemOfflineTaskResponseListHelper"], [["offline.StringSequenceHelper"]], , , , true],
        "fetchTask": [, , , , ["offline.SystemOfflineTaskResponseListHelper"], [[7], ["offline.IntListHelper"], ["offline.IntListHelper"], [3], [3]], , , , true],
        "updateDownloadingStatus": [, , , , [1], [[7], [7], [3], [7], [1]], , , , ],
        "getSystemTask": [, , , , ["offline.SystemOfflineTaskWithDetailResponse", true], [[7]], , , , true],
        "updateSystemTaskMetadata": [, , , , [1], [["offline.SystemOfflineTaskWithDetailResponse", true]], , , true, ],
        "updateSystemTaskDetail": [, , , , [1], [["offline.SystemTaskDetailResponse", true]], , , true, ],
        "finishOfflineTask": [, , , , [1], [[7], [3]], , , , ],
        "updateTaskMime": [, , , , [1], [[7], [7]], , , , ],
        "updateTaskProgress": [, , , , [1], [[7], [3], [3], [4], [4]], , , , ],
        "addUserTask": [, , , , ["offline.UserOfflineTaskResponse", true], [[7], [4], [7], [7]], , , , true],
        "fetchCopyTask": [, , , , ["offline.CopyTaskResponseListHelper"], [[3], [3], [3], [7]], , , , true],
        "fetchUserTask": [, , , , ["offline.UserOfflineTaskResponse", true], [[7], [4]], , , , true],
        "deleteCopyTask": [, , , , [1], [[7]], , , , ],
        "copyUserFile": [, , , , [1], [[7], [4], [3], [3], [4], [4], [7], [7]], , , , ],
        "finishCopy": [, , , , [1], [[7], [4]], , , , ],
        "listOfflineTask": [, , , , ["offline.UserOfflineTaskResponseListHelper"], [[4], [3], [3], [3]], , , , true],
        "listOfflineTaskPage": [, , , , ["offline.UserOfflinePageResponse", true], [[4], [3], [3], [3]], , , , true],
        "removeUserTask": [, , , , [1], [[7], [4]], , , , ],
        "resetDownloadTask": [, , , , [1], [[7]], , , , ]
    });
    exports.offline = offline;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
