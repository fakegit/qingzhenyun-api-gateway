// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `userfile.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const common = require("./common").common;
    const Slice = Ice.Slice;

    let userfile = _ModuleRegistry.module("userfile");

    userfile.FileOperationException = class extends common.CommonRpcException
    {
        constructor(innerCode, innerMessage, fileType = 0, _cause = "")
        {
            super(innerCode, innerMessage, _cause);
            this.fileType = fileType;
        }

        static get _parent()
        {
            return common.CommonRpcException;
        }

        static get _id()
        {
            return "::userfile::FileOperationException";
        }

        _mostDerivedType()
        {
            return userfile.FileOperationException;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeInt(this.fileType);
        }

        _readMemberImpl(istr)
        {
            this.fileType = istr.readInt();
        }
    };

    const iceC_userfile_UserFileResponse_ids = [
        "::Ice::Object",
        "::userfile::UserFileResponse"
    ];

    userfile.UserFileResponse = class extends Ice.Value
    {
        constructor(uuid = "", storeId = "", userId = new Ice.Long(0, 0), path = "", name = "", ext = "", size = new Ice.Long(0, 0), parent = "", type = 0, atime = new Ice.Long(0, 0), ctime = new Ice.Long(0, 0), mtime = new Ice.Long(0, 0), version = 0, locking = false, opt = 0)
        {
            super();
            this.uuid = uuid;
            this.storeId = storeId;
            this.userId = userId;
            this.path = path;
            this.name = name;
            this.ext = ext;
            this.size = size;
            this.parent = parent;
            this.type = type;
            this.atime = atime;
            this.ctime = ctime;
            this.mtime = mtime;
            this.version = version;
            this.locking = locking;
            this.opt = opt;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeString(this.uuid);
            ostr.writeString(this.storeId);
            ostr.writeLong(this.userId);
            ostr.writeString(this.path);
            ostr.writeString(this.name);
            ostr.writeString(this.ext);
            ostr.writeLong(this.size);
            ostr.writeString(this.parent);
            ostr.writeInt(this.type);
            ostr.writeLong(this.atime);
            ostr.writeLong(this.ctime);
            ostr.writeLong(this.mtime);
            ostr.writeInt(this.version);
            ostr.writeBool(this.locking);
            ostr.writeInt(this.opt);
        }

        _iceReadMemberImpl(istr)
        {
            this.uuid = istr.readString();
            this.storeId = istr.readString();
            this.userId = istr.readLong();
            this.path = istr.readString();
            this.name = istr.readString();
            this.ext = istr.readString();
            this.size = istr.readLong();
            this.parent = istr.readString();
            this.type = istr.readInt();
            this.atime = istr.readLong();
            this.ctime = istr.readLong();
            this.mtime = istr.readLong();
            this.version = istr.readInt();
            this.locking = istr.readBool();
            this.opt = istr.readInt();
        }
    };

    Slice.defineValue(userfile.UserFileResponse, iceC_userfile_UserFileResponse_ids[1], false);

    userfile.UserFileResponseDisp = class extends Ice.Object
    {
    };

    Slice.defineOperations(userfile.UserFileResponseDisp, undefined, iceC_userfile_UserFileResponse_ids, 1);

    const iceC_userfile_SimpleFile_ids = [
        "::Ice::Object",
        "::userfile::SimpleFile"
    ];

    userfile.SimpleFile = class extends Ice.Value
    {
        constructor(uuid = "", path = "")
        {
            super();
            this.uuid = uuid;
            this.path = path;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeString(this.uuid);
            ostr.writeString(this.path);
        }

        _iceReadMemberImpl(istr)
        {
            this.uuid = istr.readString();
            this.path = istr.readString();
        }
    };

    Slice.defineValue(userfile.SimpleFile, iceC_userfile_SimpleFile_ids[1], false);

    userfile.SimpleFileDisp = class extends Ice.Object
    {
    };

    Slice.defineOperations(userfile.SimpleFileDisp, undefined, iceC_userfile_SimpleFile_ids, 1);

    const iceC_userfile_SimpleFileWithStoreId_ids = [
        "::Ice::Object",
        "::userfile::SimpleFileWithStoreId"
    ];

    userfile.SimpleFileWithStoreId = class extends Ice.Value
    {
        constructor(uuid = "", path = "", storeId = "", type = 0)
        {
            super();
            this.uuid = uuid;
            this.path = path;
            this.storeId = storeId;
            this.type = type;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeString(this.uuid);
            ostr.writeString(this.path);
            ostr.writeString(this.storeId);
            ostr.writeInt(this.type);
        }

        _iceReadMemberImpl(istr)
        {
            this.uuid = istr.readString();
            this.path = istr.readString();
            this.storeId = istr.readString();
            this.type = istr.readInt();
        }
    };

    Slice.defineValue(userfile.SimpleFileWithStoreId, iceC_userfile_SimpleFileWithStoreId_ids[1], false);

    userfile.SimpleFileWithStoreIdDisp = class extends Ice.Object
    {
    };

    Slice.defineOperations(userfile.SimpleFileWithStoreIdDisp, undefined, iceC_userfile_SimpleFileWithStoreId_ids, 1);

    Slice.defineSequence(userfile, "UserFileResponseListHelper", "Ice.ObjectHelper", false, "userfile.UserFileResponse");

    Slice.defineSequence(userfile, "SimpleFileListHelper", "Ice.ObjectHelper", false, "userfile.SimpleFile");

    const iceC_userfile_UserFilePageResponse_ids = [
        "::Ice::Object",
        "::common::CommonPage",
        "::userfile::UserFilePageResponse"
    ];

    userfile.UserFilePageResponse = class extends common.CommonPage
    {
        constructor(page, pageSize, totalCount, totalPage, list = null)
        {
            super(page, pageSize, totalCount, totalPage);
            this.list = list;
        }

        _iceWriteMemberImpl(ostr)
        {
            userfile.UserFileResponseListHelper.write(ostr, this.list);
        }

        _iceReadMemberImpl(istr)
        {
            this.list = userfile.UserFileResponseListHelper.read(istr);
        }
    };

    Slice.defineValue(userfile.UserFilePageResponse, iceC_userfile_UserFilePageResponse_ids[2], false);

    userfile.UserFilePageResponseDisp = class extends common.CommonPageDisp
    {
    };

    Slice.defineOperations(userfile.UserFilePageResponseDisp, undefined, iceC_userfile_UserFilePageResponse_ids, 2);

    const iceC_userfile_FileOperation_ids = [
        "::Ice::Object",
        "::userfile::FileOperation"
    ];

    userfile.FileOperation = class extends Ice.Value
    {
        constructor(taskId = new Ice.Long(0, 0), userId = new Ice.Long(0, 0), source = "", dest = "", operation = 0)
        {
            super();
            this.taskId = taskId;
            this.userId = userId;
            this.source = source;
            this.dest = dest;
            this.operation = operation;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeLong(this.taskId);
            ostr.writeLong(this.userId);
            ostr.writeString(this.source);
            ostr.writeString(this.dest);
            ostr.writeInt(this.operation);
        }

        _iceReadMemberImpl(istr)
        {
            this.taskId = istr.readLong();
            this.userId = istr.readLong();
            this.source = istr.readString();
            this.dest = istr.readString();
            this.operation = istr.readInt();
        }
    };

    Slice.defineValue(userfile.FileOperation, iceC_userfile_FileOperation_ids[1], false);

    userfile.FileOperationDisp = class extends Ice.Object
    {
    };

    Slice.defineOperations(userfile.FileOperationDisp, undefined, iceC_userfile_FileOperation_ids, 1);

    Slice.defineSequence(userfile, "FileOperationListHelper", "Ice.ObjectHelper", false, "userfile.FileOperation");

    Slice.defineSequence(userfile, "SimpleFileWithStoreIdListHelper", "Ice.ObjectHelper", false, "userfile.SimpleFileWithStoreId");

    const iceC_userfile_UserFileServiceHandler_ids = [
        "::Ice::Object",
        "::userfile::UserFileServiceHandler"
    ];

    userfile.UserFileServiceHandler = class extends Ice.Object
    {
    };

    userfile.UserFileServiceHandlerPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(userfile.UserFileServiceHandler, userfile.UserFileServiceHandlerPrx, iceC_userfile_UserFileServiceHandler_ids, 1,
    {
        "fetchFileOperation": [, , , , ["userfile.FileOperationListHelper"], [[3]], , , , true],
        "createDirectory": [, , , , ["userfile.UserFileResponse", true], [[4], [7], [7], [7]], , , , true],
        "createFile": [, , , , ["userfile.UserFileResponse", true], [[4], [7], [7], [7], [4], [7]], , , , true],
        "listDirectoryPage": [, , , , ["userfile.UserFilePageResponse", true], [[4], [7], [3], [3], [3], [3]], , , , true],
        "listDirectory": [, , , , ["userfile.UserFileResponseListHelper"], [[4], [7], [3], [3], [3], [3]], , , , true],
        "get": [, , , , ["userfile.UserFileResponse", true], [[4], [7], [7]], , , , true],
        "getSimpleFileWithStoreIdList": [, , , , ["userfile.SimpleFileWithStoreIdListHelper"], [[4], ["common.StringListHelper"]], , , , true],
        "rename": [, , , , [3], [[4], [7], [7], [7]], , , , ],
        "move": [, , , , [3], [[4], [7], [7], [7], [7]], , , , ],
        "copy": [, , , , [3], [[4], [7], [7], [7], [7]], , , , ],
        "remove": [, , , , [3], [[4], [7], [7]], , , , ],
        "unlock": [, , , , [3], [[4], [7]], , , , ],
        "deleteFile": [, , , , [3], [[4], [7]], , , , ],
        "updateDirectorySize": [, , , , [3], [[4], [7], [4]], , , , ]
    });
    exports.userfile = userfile;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
