// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `cloudstore.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const Slice = Ice.Slice;

    let cloudstore = _ModuleRegistry.module("cloudstore");

    const iceC_cloudstore_CloudStoreResponse_ids = [
        "::Ice::Object",
        "::cloudstore::CloudStoreResponse"
    ];

    cloudstore.CloudStoreResponse = class extends Ice.Value
    {
        constructor(hash = "", size = new Ice.Long(0, 0), mime = "", uploadUser = new Ice.Long(0, 0), ctime = new Ice.Long(0, 0), originalFilename = "", bucket = "", key = "", type = 0, preview = 0, uploadIp = "", flag = 0, hasPreview = false)
        {
            super();
            this.hash = hash;
            this.size = size;
            this.mime = mime;
            this.uploadUser = uploadUser;
            this.ctime = ctime;
            this.originalFilename = originalFilename;
            this.bucket = bucket;
            this.key = key;
            this.type = type;
            this.preview = preview;
            this.uploadIp = uploadIp;
            this.flag = flag;
            this.hasPreview = hasPreview;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeString(this.hash);
            ostr.writeLong(this.size);
            ostr.writeString(this.mime);
            ostr.writeLong(this.uploadUser);
            ostr.writeLong(this.ctime);
            ostr.writeString(this.originalFilename);
            ostr.writeString(this.bucket);
            ostr.writeString(this.key);
            ostr.writeInt(this.type);
            ostr.writeInt(this.preview);
            ostr.writeString(this.uploadIp);
            ostr.writeInt(this.flag);
            ostr.writeBool(this.hasPreview);
        }

        _iceReadMemberImpl(istr)
        {
            this.hash = istr.readString();
            this.size = istr.readLong();
            this.mime = istr.readString();
            this.uploadUser = istr.readLong();
            this.ctime = istr.readLong();
            this.originalFilename = istr.readString();
            this.bucket = istr.readString();
            this.key = istr.readString();
            this.type = istr.readInt();
            this.preview = istr.readInt();
            this.uploadIp = istr.readString();
            this.flag = istr.readInt();
            this.hasPreview = istr.readBool();
        }
    };

    Slice.defineValue(cloudstore.CloudStoreResponse, iceC_cloudstore_CloudStoreResponse_ids[1], false);

    cloudstore.CloudStoreResponseDisp = class extends Ice.Object
    {
    };

    Slice.defineOperations(cloudstore.CloudStoreResponseDisp, undefined, iceC_cloudstore_CloudStoreResponse_ids, 1);

    const iceC_cloudstore_KnownMimeResponse_ids = [
        "::Ice::Object",
        "::cloudstore::KnownMimeResponse"
    ];

    cloudstore.KnownMimeResponse = class extends Ice.Value
    {
        constructor(uuid = new Ice.Long(0, 0), mime = "", previewState = 0, level = 0, isReg = 0)
        {
            super();
            this.uuid = uuid;
            this.mime = mime;
            this.previewState = previewState;
            this.level = level;
            this.isReg = isReg;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeLong(this.uuid);
            ostr.writeString(this.mime);
            ostr.writeInt(this.previewState);
            ostr.writeInt(this.level);
            ostr.writeInt(this.isReg);
        }

        _iceReadMemberImpl(istr)
        {
            this.uuid = istr.readLong();
            this.mime = istr.readString();
            this.previewState = istr.readInt();
            this.level = istr.readInt();
            this.isReg = istr.readInt();
        }
    };

    Slice.defineValue(cloudstore.KnownMimeResponse, iceC_cloudstore_KnownMimeResponse_ids[1], false);

    cloudstore.KnownMimeResponseDisp = class extends Ice.Object
    {
    };

    Slice.defineOperations(cloudstore.KnownMimeResponseDisp, undefined, iceC_cloudstore_KnownMimeResponse_ids, 1);

    const iceC_cloudstore_UnknownMimeResponse_ids = [
        "::Ice::Object",
        "::cloudstore::UnknownMimeResponse"
    ];

    cloudstore.UnknownMimeResponse = class extends Ice.Value
    {
        constructor(uuid = new Ice.Long(0, 0), mime = "", createTime = new Ice.Long(0, 0))
        {
            super();
            this.uuid = uuid;
            this.mime = mime;
            this.createTime = createTime;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeLong(this.uuid);
            ostr.writeString(this.mime);
            ostr.writeLong(this.createTime);
        }

        _iceReadMemberImpl(istr)
        {
            this.uuid = istr.readLong();
            this.mime = istr.readString();
            this.createTime = istr.readLong();
        }
    };

    Slice.defineValue(cloudstore.UnknownMimeResponse, iceC_cloudstore_UnknownMimeResponse_ids[1], false);

    cloudstore.UnknownMimeResponseDisp = class extends Ice.Object
    {
    };

    Slice.defineOperations(cloudstore.UnknownMimeResponseDisp, undefined, iceC_cloudstore_UnknownMimeResponse_ids, 1);

    cloudstore.CloudStoreTokenResponse = class
    {
        constructor(name = "", parent = "", path = "", token = "", type = 0, uploadUrl = "", version = 0)
        {
            this.name = name;
            this.parent = parent;
            this.path = path;
            this.token = token;
            this.type = type;
            this.uploadUrl = uploadUrl;
            this.version = version;
        }

        _write(ostr)
        {
            ostr.writeString(this.name);
            ostr.writeString(this.parent);
            ostr.writeString(this.path);
            ostr.writeString(this.token);
            ostr.writeInt(this.type);
            ostr.writeString(this.uploadUrl);
            ostr.writeInt(this.version);
        }

        _read(istr)
        {
            this.name = istr.readString();
            this.parent = istr.readString();
            this.path = istr.readString();
            this.token = istr.readString();
            this.type = istr.readInt();
            this.uploadUrl = istr.readString();
            this.version = istr.readInt();
        }

        static get minWireSize()
        {
            return  13;
        }
    };

    Slice.defineStruct(cloudstore.CloudStoreTokenResponse, true, true);

    const iceC_cloudstore_SimpleDetailResponse_ids = [
        "::Ice::Object",
        "::cloudstore::SimpleDetailResponse"
    ];

    cloudstore.SimpleDetailResponse = class extends Ice.Value
    {
        constructor(hash = "", size = new Ice.Long(0, 0), preview = 0, mime = "", flag = 0, hasPreview = false)
        {
            super();
            this.hash = hash;
            this.size = size;
            this.preview = preview;
            this.mime = mime;
            this.flag = flag;
            this.hasPreview = hasPreview;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeString(this.hash);
            ostr.writeLong(this.size);
            ostr.writeInt(this.preview);
            ostr.writeString(this.mime);
            ostr.writeInt(this.flag);
            ostr.writeBool(this.hasPreview);
        }

        _iceReadMemberImpl(istr)
        {
            this.hash = istr.readString();
            this.size = istr.readLong();
            this.preview = istr.readInt();
            this.mime = istr.readString();
            this.flag = istr.readInt();
            this.hasPreview = istr.readBool();
        }
    };

    Slice.defineValue(cloudstore.SimpleDetailResponse, iceC_cloudstore_SimpleDetailResponse_ids[1], false);

    cloudstore.SimpleDetailResponseDisp = class extends Ice.Object
    {
    };

    Slice.defineOperations(cloudstore.SimpleDetailResponseDisp, undefined, iceC_cloudstore_SimpleDetailResponse_ids, 1);

    const iceC_cloudstore_PreviewTaskResponse_ids = [
        "::Ice::Object",
        "::cloudstore::PreviewTaskResponse"
    ];

    cloudstore.PreviewTaskResponse = class extends Ice.Value
    {
        constructor(hash = "", status = 0, info = "", createTime = new Ice.Long(0, 0), updateTime = new Ice.Long(0, 0))
        {
            super();
            this.hash = hash;
            this.status = status;
            this.info = info;
            this.createTime = createTime;
            this.updateTime = updateTime;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeString(this.hash);
            ostr.writeInt(this.status);
            ostr.writeString(this.info);
            ostr.writeLong(this.createTime);
            ostr.writeLong(this.updateTime);
        }

        _iceReadMemberImpl(istr)
        {
            this.hash = istr.readString();
            this.status = istr.readInt();
            this.info = istr.readString();
            this.createTime = istr.readLong();
            this.updateTime = istr.readLong();
        }
    };

    Slice.defineValue(cloudstore.PreviewTaskResponse, iceC_cloudstore_PreviewTaskResponse_ids[1], false);

    cloudstore.PreviewTaskResponseDisp = class extends Ice.Object
    {
    };

    Slice.defineOperations(cloudstore.PreviewTaskResponseDisp, undefined, iceC_cloudstore_PreviewTaskResponse_ids, 1);

    const iceC_cloudstore_CloudStoreResponseEx_ids = [
        "::Ice::Object",
        "::cloudstore::CloudStoreResponse",
        "::cloudstore::CloudStoreResponseEx"
    ];

    cloudstore.CloudStoreResponseEx = class extends cloudstore.CloudStoreResponse
    {
        constructor(hash, size, mime, uploadUser, ctime, originalFilename, bucket, key, type, preview, uploadIp, flag, hasPreview, downloadAddress = "")
        {
            super(hash, size, mime, uploadUser, ctime, originalFilename, bucket, key, type, preview, uploadIp, flag, hasPreview);
            this.downloadAddress = downloadAddress;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeString(this.downloadAddress);
        }

        _iceReadMemberImpl(istr)
        {
            this.downloadAddress = istr.readString();
        }
    };

    Slice.defineValue(cloudstore.CloudStoreResponseEx, iceC_cloudstore_CloudStoreResponseEx_ids[2], false);

    cloudstore.CloudStoreResponseExDisp = class extends cloudstore.CloudStoreResponseDisp
    {
    };

    Slice.defineOperations(cloudstore.CloudStoreResponseExDisp, undefined, iceC_cloudstore_CloudStoreResponseEx_ids, 2);

    Slice.defineSequence(cloudstore, "IntListHelper", "Ice.IntHelper", true);

    Slice.defineSequence(cloudstore, "UnknownMimeResponseListHelper", "Ice.ObjectHelper", false, "cloudstore.UnknownMimeResponse");

    Slice.defineSequence(cloudstore, "KnownMimeResponseListHelper", "Ice.ObjectHelper", false, "cloudstore.KnownMimeResponse");

    Slice.defineSequence(cloudstore, "StringSequenceHelper", "Ice.StringHelper", false);

    Slice.defineSequence(cloudstore, "PreviewTaskResponseListHelper", "Ice.ObjectHelper", false, "cloudstore.PreviewTaskResponse");

    Slice.defineSequence(cloudstore, "SimpleDetailResponseSequenceHelper", "Ice.ObjectHelper", false, "cloudstore.SimpleDetailResponse");

    const iceC_cloudstore_CloudStoreServiceHandler_ids = [
        "::Ice::Object",
        "::cloudstore::CloudStoreServiceHandler"
    ];

    cloudstore.CloudStoreServiceHandler = class extends Ice.Object
    {
    };

    cloudstore.CloudStoreServiceHandlerPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(cloudstore.CloudStoreServiceHandler, cloudstore.CloudStoreServiceHandlerPrx, iceC_cloudstore_CloudStoreServiceHandler_ids, 1,
    {
        "getKnownMimeList": [, , , , ["cloudstore.KnownMimeResponseListHelper"], , , , , true],
        "getUnknownMimeList": [, , , , ["cloudstore.UnknownMimeResponseListHelper"], , , , , true],
        "addUnknownMime": [, , , , [1], [[7]], , , , ],
        "createUploadToken": [, , , , [cloudstore.CloudStoreTokenResponse], [[4], [7], [7], [7], [7]], , , , ],
        "get": [, , , , ["cloudstore.CloudStoreResponse", true], [[7]], , , , true],
        "getEx": [, , , , ["cloudstore.CloudStoreResponseEx", true], [[7], [4], [1]], , , , true],
        "uploadFile": [, , , , ["cloudstore.CloudStoreResponse", true], [[7]], , , , true],
        "getList": [, , , , ["cloudstore.SimpleDetailResponseSequenceHelper"], [["cloudstore.StringSequenceHelper"]], , , , true],
        "getSimple": [, , , , ["cloudstore.SimpleDetailResponse", true], [[7]], , , , true],
        "fetchPreviewTask": [, , , , ["cloudstore.PreviewTaskResponseListHelper"], [[7], ["cloudstore.IntListHelper"], [3], [3]], , , , true],
        "updatePreviewTask": [, , , , ["cloudstore.PreviewTaskResponse", true], [[7], [7], ["cloudstore.PreviewTaskResponse", true]], , , true, true],
        "updatePreviewTaskInfo": [, , , , ["cloudstore.PreviewTaskResponse", true], [[7], [7], [3], [7]], , , , true],
        "finishPreviewTask": [, , , , [1], [[7], [7], [3]], , , , ],
        "updateMimeAndKey": [, , , , [1], [[7], [7], [7], [1], [3], [7], [7]], , , , ]
    });
    exports.cloudstore = cloudstore;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
