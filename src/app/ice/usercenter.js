// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `usercenter.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const Slice = Ice.Slice;

    let usercenter = _ModuleRegistry.module("usercenter");

    usercenter.RegisterFailedException = class extends Ice.UserException
    {
        constructor(innerCode = 0, innerMessage = "", _cause = "")
        {
            super(_cause);
            this.innerCode = innerCode;
            this.innerMessage = innerMessage;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::usercenter::RegisterFailedException";
        }

        _mostDerivedType()
        {
            return usercenter.RegisterFailedException;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeInt(this.innerCode);
            ostr.writeString(this.innerMessage);
        }

        _readMemberImpl(istr)
        {
            this.innerCode = istr.readInt();
            this.innerMessage = istr.readString();
        }
    };

    usercenter.LoginFailedException = class extends Ice.UserException
    {
        constructor(innerCode = 0, innerMessage = "", _cause = "")
        {
            super(_cause);
            this.innerCode = innerCode;
            this.innerMessage = innerMessage;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::usercenter::LoginFailedException";
        }

        _mostDerivedType()
        {
            return usercenter.LoginFailedException;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeInt(this.innerCode);
            ostr.writeString(this.innerMessage);
        }

        _readMemberImpl(istr)
        {
            this.innerCode = istr.readInt();
            this.innerMessage = istr.readString();
        }
    };

    Slice.defineDictionary(usercenter, "SsidMap", "SsidMapHelper", "Ice.StringHelper", "Ice.StringHelper", false, undefined, undefined);

    const iceC_usercenter_UserDataResponse_ids = [
        "::Ice::Object",
        "::usercenter::UserDataResponse"
    ];

    usercenter.UserDataResponse = class extends Ice.Value
    {
        constructor(uuid = new Ice.Long(0, 0), name = "", email = "", countryCode = "", phone = "", createTime = new Ice.Long(0, 0), createIp = "", ssid = null, icon = "", spaceUsed = new Ice.Long(0, 0), spaceCapacity = new Ice.Long(0, 0), type = 0, status = 0, version = 0)
        {
            super();
            this.uuid = uuid;
            this.name = name;
            this.email = email;
            this.countryCode = countryCode;
            this.phone = phone;
            this.createTime = createTime;
            this.createIp = createIp;
            this.ssid = ssid;
            this.icon = icon;
            this.spaceUsed = spaceUsed;
            this.spaceCapacity = spaceCapacity;
            this.type = type;
            this.status = status;
            this.version = version;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeLong(this.uuid);
            ostr.writeString(this.name);
            ostr.writeString(this.email);
            ostr.writeString(this.countryCode);
            ostr.writeString(this.phone);
            ostr.writeLong(this.createTime);
            ostr.writeString(this.createIp);
            usercenter.SsidMapHelper.write(ostr, this.ssid);
            ostr.writeString(this.icon);
            ostr.writeLong(this.spaceUsed);
            ostr.writeLong(this.spaceCapacity);
            ostr.writeInt(this.type);
            ostr.writeInt(this.status);
            ostr.writeInt(this.version);
        }

        _iceReadMemberImpl(istr)
        {
            this.uuid = istr.readLong();
            this.name = istr.readString();
            this.email = istr.readString();
            this.countryCode = istr.readString();
            this.phone = istr.readString();
            this.createTime = istr.readLong();
            this.createIp = istr.readString();
            this.ssid = usercenter.SsidMapHelper.read(istr);
            this.icon = istr.readString();
            this.spaceUsed = istr.readLong();
            this.spaceCapacity = istr.readLong();
            this.type = istr.readInt();
            this.status = istr.readInt();
            this.version = istr.readInt();
        }
    };

    Slice.defineValue(usercenter.UserDataResponse, iceC_usercenter_UserDataResponse_ids[1], false);

    usercenter.UserDataResponseDisp = class extends Ice.Object
    {
    };

    Slice.defineOperations(usercenter.UserDataResponseDisp, undefined, iceC_usercenter_UserDataResponse_ids, 1);

    const iceC_usercenter_UpdateInfoResponse_ids = [
        "::Ice::Object",
        "::usercenter::UpdateInfoResponse"
    ];

    usercenter.UpdateInfoResponse = class extends Ice.Value
    {
        constructor(buildId = new Ice.Long(0, 0), lang = "", description = "", linkUrl = "", displayVersion = "", action = 0, platform = 0, arch = 0, version = 0, type = 0)
        {
            super();
            this.buildId = buildId;
            this.lang = lang;
            this.description = description;
            this.linkUrl = linkUrl;
            this.displayVersion = displayVersion;
            this.action = action;
            this.platform = platform;
            this.arch = arch;
            this.version = version;
            this.type = type;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeLong(this.buildId);
            ostr.writeString(this.lang);
            ostr.writeString(this.description);
            ostr.writeString(this.linkUrl);
            ostr.writeString(this.displayVersion);
            ostr.writeInt(this.action);
            ostr.writeInt(this.platform);
            ostr.writeInt(this.arch);
            ostr.writeInt(this.version);
            ostr.writeInt(this.type);
        }

        _iceReadMemberImpl(istr)
        {
            this.buildId = istr.readLong();
            this.lang = istr.readString();
            this.description = istr.readString();
            this.linkUrl = istr.readString();
            this.displayVersion = istr.readString();
            this.action = istr.readInt();
            this.platform = istr.readInt();
            this.arch = istr.readInt();
            this.version = istr.readInt();
            this.type = istr.readInt();
        }
    };

    Slice.defineValue(usercenter.UpdateInfoResponse, iceC_usercenter_UpdateInfoResponse_ids[1], false);

    usercenter.UpdateInfoResponseDisp = class extends Ice.Object
    {
    };

    Slice.defineOperations(usercenter.UpdateInfoResponseDisp, undefined, iceC_usercenter_UpdateInfoResponse_ids, 1);

    Slice.defineSequence(usercenter, "UserDataResponseListHelper", "Ice.ObjectHelper", false, "usercenter.UserDataResponse");

    Slice.defineSequence(usercenter, "UpdateInfoResponseListHelper", "Ice.ObjectHelper", false, "usercenter.UpdateInfoResponse");

    const iceC_usercenter_UserCenterServiceHandler_ids = [
        "::Ice::Object",
        "::usercenter::UserCenterServiceHandler"
    ];

    usercenter.UserCenterServiceHandler = class extends Ice.Object
    {
    };

    usercenter.UserCenterServiceHandlerPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(usercenter.UserCenterServiceHandler, usercenter.UserCenterServiceHandlerPrx, iceC_usercenter_UserCenterServiceHandler_ids, 1,
    {
        "walkUser": [, , , , ["usercenter.UserDataResponseListHelper"], [[4], [3]], , , , true],
        "registerUser": [, , , , ["usercenter.UserDataResponse", true], [[7], [7], [7], [7], [7], [7]], ,
        [
            usercenter.RegisterFailedException
        ], , true],
        "getUserByUuid": [, , , , ["usercenter.UserDataResponse", true], [[4]], , , , true],
        "getUserByPhone": [, , , , ["usercenter.UserDataResponse", true], [[7], [7]], , , , true],
        "loginByName": [, , , , ["usercenter.UserDataResponse", true], [[7], [7], [7]], ,
        [
            usercenter.LoginFailedException
        ], , true],
        "loginByPhone": [, , , , ["usercenter.UserDataResponse", true], [[7], [7], [7], [7]], ,
        [
            usercenter.LoginFailedException
        ], , true],
        "loginByMessage": [, , , , ["usercenter.UserDataResponse", true], [[7], [7], [7]], ,
        [
            usercenter.LoginFailedException
        ], , true],
        "logout": [, , , , ["usercenter.UserDataResponse", true], [[4], [7]], , , , true],
        "fetchAvailableUpdate": [, , , , ["usercenter.UpdateInfoResponseListHelper"], [[3], [3]], , , , true],
        "updateUserSpaceUsage": [, , , , [3], [[4], [4]], , , , ],
        "changePassword": [, , , , [1], [[4], [7], [7]], , , , ],
        "changePasswordByUuid": [, , , , [1], [[4], [7]], , , , ],
        "changeName": [, , , , [1], [[4], [7]], , , , ],
        "changeNameAndGet": [, , , , ["usercenter.UserDataResponse", true], [[4], [7]], , , , true]
    });
    exports.usercenter = usercenter;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
